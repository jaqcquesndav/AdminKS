import { Navigate, Outlet, useLocation } from 'react-router-dom';
import { useAuth0 } from '@auth0/auth0-react';
import { useEffect } from 'react';
import { authService } from '../services/auth/authService';

export function ProtectedRoute() {
  const { isAuthenticated, isLoading, getAccessTokenSilently, user } = useAuth0();
  const location = useLocation();

  // V√©rifier le token lors de l'acc√®s √† une route prot√©g√©e
  useEffect(() => {
    const checkAuth = async () => {
      if (isAuthenticated && !isLoading) {
        try {
          console.log('üîí Acc√®s √† une route prot√©g√©e:', location.pathname);
          console.log('üë§ Utilisateur Auth0:', user ? {
            sub: user.sub,
            email: user.email,
            name: user.name
          } : 'absent');
          
          // V√©rifier si authService a d√©j√† un token valide (non expir√©)
          if (!authService.isAuthenticated()) {
            console.log('‚öôÔ∏è Token local via authService manquant ou expir√©. Tentative de r√©cup√©ration du token Auth0...');
            try {
              const tokenResponse = await getAccessTokenSilently({
                detailedResponse: true,
                timeoutInSeconds: 60
              });
              console.log('üîë Nouveau token Auth0 obtenu (d√©taill√©):', {
                accessToken: tokenResponse.access_token ? tokenResponse.access_token.substring(0, 15) + '...' : 'absent',
                idToken: tokenResponse.id_token ? 'pr√©sent' : 'absent',
                expiresIn: tokenResponse.expires_in
              });
              
              if (user) {
                await authService.refreshTokenFromAuth0(
                  user,
                  tokenResponse.access_token,
                  tokenResponse.id_token,
                  undefined, // Le refresh token n'est pas directement fourni par getAccessTokenSilently ici
                  tokenResponse.expires_in
                );
                console.log('üíæ Token Auth0 et infos utilisateur sauvegard√©s via authService');
              }
            } catch (tokenError) {
              console.error('‚ùå Erreur lors de la r√©cup√©ration du token Auth0 en route prot√©g√©e:', tokenError);
              // G√©rer l'erreur, par exemple, d√©connecter l'utilisateur si le token ne peut √™tre rafra√Æchi
            }
          } else {
            console.log('‚úÖ Token local (via authService) valide et existant.');
          }
        } catch (error) {
          console.error('‚ùå Erreur de v√©rification du token sur route prot√©g√©e:', error);
        }
      } else if (!isAuthenticated && !isLoading) {
        console.log('‚ùå Utilisateur non authentifi√© tentant d\'acc√©der √†:', location.pathname);
      }
    };
    
    checkAuth();
  }, [isAuthenticated, isLoading, location.pathname, getAccessTokenSilently, user]);

  // Si l'authentification est en cours de chargement, afficher un √©cran de chargement
  if (isLoading) {
    console.log('‚è≥ Chargement de l\'authentification...');
    return <div className="min-h-screen flex items-center justify-center">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
    </div>;
  }

  // Si l'utilisateur n'est pas authentifi√©, rediriger vers la page de login
  if (!isAuthenticated) {
    console.log('üö´ Utilisateur non authentifi√©, redirection vers login');
    return <Navigate to="/login" replace state={{ from: location }} />;
  }

  // L'utilisateur est authentifi√©, permettre l'acc√®s aux routes prot√©g√©es
  console.log('‚úÖ Utilisateur authentifi√©, acc√®s autoris√© √†:', location.pathname);
  return <Outlet />;
}