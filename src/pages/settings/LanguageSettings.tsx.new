import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';
import { Label } from '../../components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';
import { useLanguage } from '../../hooks/useLanguage';
import { useToastContext } from '../../contexts/ToastContext';
import { AlertCircle } from 'lucide-react';

const LanguageSettings: React.FC = () => {
  const { i18n } = useTranslation();
  const { language, setLanguage, dateFormat, setDateFormat, isLoading, error } = useLanguage();
  const { showToast } = useToastContext();
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    // Afficher une erreur si le hook useLanguage renvoie une erreur
    if (error) {
      showToast('error', `Erreur de chargement des paramètres de langue: ${error}`);
    }
  }, [error, showToast]);

  const handleLanguageChange = async (newLanguage: string) => {
    try {
      setIsSubmitting(true);
      await setLanguage(newLanguage);
      await i18n.changeLanguage(newLanguage);
      showToast('success', 'Langue modifiée avec succès');
    } catch (error) {
      console.error('Erreur lors du changement de langue:', error);
      showToast('error', 'Erreur lors de la modification de la langue. Veuillez réessayer.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDateFormatChange = async (newDateFormat: string) => {
    try {
      setIsSubmitting(true);
      await setDateFormat(newDateFormat);
      showToast('success', 'Format de date modifié avec succès');
    } catch (error) {
      console.error('Erreur lors du changement de format de date:', error);
      showToast('error', 'Erreur lors de la modification du format de date. Veuillez réessayer.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Supported languages and date formats
  const supportedLanguages = [
    { value: 'en', label: 'English' },
    { value: 'fr', label: 'Français' },
    // Add other supported languages here
  ];

  const supportedDateFormats = [
    { value: 'MM/DD/YYYY', label: 'MM/DD/YYYY' },
    { value: 'DD/MM/YYYY', label: 'DD/MM/YYYY' },
    { value: 'YYYY-MM-DD', label: 'YYYY-MM-DD' },
    // Add other supported date formats here
  ];

  return (
    <Card>
      <CardHeader>
        <CardTitle>Language & Date Settings</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {error && (
          <div className="bg-red-50 dark:bg-red-900/20 p-3 rounded-md border border-red-200 dark:border-red-800 mb-4">
            <div className="flex items-center">
              <AlertCircle className="h-5 w-5 text-red-600 dark:text-red-400 mr-2" />
              <p className="text-sm text-red-600 dark:text-red-400">
                {error}
              </p>
            </div>
          </div>
        )}

        {isLoading ? (
          <div className="flex justify-center items-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary"></div>
          </div>
        ) : (
          <>
            <div className="flex items-center justify-between">
              <Label htmlFor="language-select">Language</Label>
              <Select value={language} onValueChange={handleLanguageChange} disabled={isSubmitting}>
                <SelectTrigger id="language-select" className="w-[180px]">
                  <SelectValue placeholder="Select language" />
                </SelectTrigger>
                <SelectContent>
                  {supportedLanguages.map((lang) => (
                    <SelectItem key={lang.value} value={lang.value}>
                      {lang.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-center justify-between">
              <Label htmlFor="date-format-select">Date Format</Label>
              <Select value={dateFormat} onValueChange={handleDateFormatChange} disabled={isSubmitting}>
                <SelectTrigger id="date-format-select" className="w-[180px]">
                  <SelectValue placeholder="Select date format" />
                </SelectTrigger>
                <SelectContent>
                  {supportedDateFormats.map((format) => (
                    <SelectItem key={format.value} value={format.value}>
                      {format.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            {isSubmitting && (
              <div className="text-center text-sm text-gray-500">
                Applying changes...
              </div>
            )}
          </>
        )}
      </CardContent>
    </Card>
  );
};

export default LanguageSettings;
